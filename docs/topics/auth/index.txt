User Authentication in Django
=============================

.. toctree::
   :hidden:

   default
   passwords
   customizing

.. module:: django.contrib.auth
   :synopsis: Django's authentication framework.

Django provides a comprehensive user authentication system that includes user account management, group assignments, permissions, and cookie-based user sessions. This section of the documentation explains the default implementation, as well as how to extend and customize it to meet your project's requirements.

Overview
========

The Django authentication system encompasses both authentication and authorization. In simple terms, authentication verifies whether a user is who they claim to be, while authorization determines what actions an authenticated user is allowed to perform. Throughout this documentation, the term "authentication" is used to refer to both of these tasks.

Key components of the authentication system include:

- **Users**: Represent individuals with accounts.
- **Permissions**: Binary flags that specify whether a user can perform certain tasks.
- **Groups**: A versatile way to assign labels and permissions to multiple users.
- **Configurable Password Hashing**: Ensures secure storage of user passwords.
- **Forms and View Tools**: Tools for user login and content access control.
- **Pluggable Backend System**: Allows customization of authentication backends.

It's worth noting that Django's authentication system aims to be versatile and generic, which means it may not include certain features commonly found in other web authentication systems. However, third-party packages have been developed to address some of these common requirements, such as password strength checking, login attempt throttling, authentication against third-party providers (e.g., OAuth), and object-level permissions.

Installation
============

Authentication support is bundled as a Django contrib module in ``django.contrib.auth``. By default, the necessary configuration is already included in the `settings.py` generated by `django-admin startproject`, which includes the following entries in your `INSTALLED_APPS` setting:

1. `'django.contrib.auth'`: Contains the core components of the authentication framework and its default models.
2. `'django.contrib.contenttypes'`: Provides Django's [content type system](ref/contrib/contenttypes), allowing permissions to be associated with your custom models.

Additionally, the following middleware entries are included in your `MIDDLEWARE` setting:

1. `django.contrib.sessions.middleware.SessionMiddleware`: Manages [sessions](topics/http/sessions) across requests.
2. `django.contrib.auth.middleware.AuthenticationMiddleware`: Associates users with requests using sessions.

With these settings in place, running the `manage.py migrate` command will create the necessary database tables for authentication-related models and permissions for any models defined in your installed apps.

Usage
=====

- [Working with User Objects](user-objects.md): Learn how to create, query, and manipulate user objects.
- [Permissions and Authorization](topic-authorization.md): Understand how permissions and authorization work in Django.
- [Authentication in Web Requests](auth-web-requests.md): Discover how user authentication is integrated into web request handling.
- [Managing Users in the Admin](auth-admin.md): Explore user management through the Django admin interface.

API Reference
=============

For detailed information on Django's default authentication implementation, refer to the [API reference](ref/contrib/auth).

Customization
=============

If you need to customize user authentication for your project, consult the [customization guide](customizing.md).

Password Management
===================

Explore password management in Django in the [passwords section](passwords.md).

